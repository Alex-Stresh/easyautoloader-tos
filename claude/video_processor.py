import os
import subprocess
import whisper

def get_video_duration(video_file):
    result = subprocess.run(
        ["ffprobe", "-i", video_file, "-show_entries", "format=duration", "-v", "quiet", "-of", "csv=p=0"],
        capture_output=True, text=True
    )
    return float(result.stdout.strip())

def get_video_info(video_file):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–µ
    
    Args:
        video_file (str): –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—É
        
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∏–¥–µ–æ
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–∏–¥–µ–æ
    resolution_cmd = [
        "ffprobe", "-v", "error", "-select_streams", "v:0", 
        "-show_entries", "stream=width,height", "-of", "csv=p=0", video_file
    ]
    resolution_result = subprocess.run(resolution_cmd, capture_output=True, text=True)
    width, height = map(int, resolution_result.stdout.strip().split(','))
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ
    duration = get_video_duration(video_file)
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∏—Ç—Ä–µ–π—Ç –≤–∏–¥–µ–æ
    bitrate_cmd = [
        "ffprobe", "-v", "error", "-select_streams", "v:0", 
        "-show_entries", "stream=bit_rate", "-of", "csv=p=0", video_file
    ]
    bitrate_result = subprocess.run(bitrate_cmd, capture_output=True, text=True)
    bitrate = bitrate_result.stdout.strip()
    
    return {
        'width': width,
        'height': height,
        'duration': duration,
        'duration_formatted': format_time(duration),
        'bitrate': bitrate
    }

def format_time(seconds):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–µ–∫—É–Ω–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú:–°–°
    
    Args:
        seconds (float): –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
    Returns:
        str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    """
    hours = int(seconds // 3600)
    minutes = int((seconds % 3600) // 60)
    seconds = int(seconds % 60)
    return f"{hours:02}:{minutes:02}:{seconds:02}"

def generate_subtitles(video_file, subtitles_file="subtitles.srt"):
    print("üîä –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ...")
    audio_file = os.path.splitext(video_file)[0] + ".wav"
    
    # Instead of trying to copy the audio codec, we'll convert it to WAV format
    # which is well supported by whisper and ffmpeg
    subprocess.run([
        "ffmpeg", 
        "-i", video_file, 
        "-vn",            # No video
        "-ar", "16000",   # Audio sample rate that whisper expects
        "-ac", "1",       # Mono audio (1 channel)
        "-c:a", "pcm_s16le",  # PCM 16-bit audio codec
        "-y",             # Overwrite output file if it exists
        audio_file
    ])

    print("üìù –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏...")
    model = whisper.load_model("base")
    result = model.transcribe(audio_file, fp16=False)

    with open(subtitles_file, "w", encoding="utf-8") as f:
        index = 1
        for segment in result["segments"]:
            words = segment["text"].split()
            start_time = segment["start"]
            end_time = segment["end"]
            duration = end_time - start_time
            
            chunk_size = 3
            for i in range(0, len(words), chunk_size):
                chunk = " ".join(words[i:i + chunk_size])
                
                chunk_start = start_time + (i / len(words)) * duration
                chunk_end = chunk_start + (duration / (len(words) / chunk_size))

                start_str = f"{int(chunk_start // 3600):02}:{int((chunk_start % 3600) // 60):02}:{int(chunk_start % 60):02},{int((chunk_start % 1) * 1000):03}"
                end_str = f"{int(chunk_end // 3600):02}:{int((chunk_end % 3600) // 60):02}:{int(chunk_end % 60):02},{int((chunk_end % 1) * 1000):03}"

                f.write(f"{index}\n")
                f.write(f"{start_str} --> {end_str}\n")
                f.write(f"{chunk}\n\n")
                index += 1
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª
    if os.path.exists(audio_file):
        os.remove(audio_file)
    
    return subtitles_file

def add_subtitles_to_video(video_file, subtitles_file, output_file):
    print("üé¨ –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã...")
    subprocess.run([
        "ffmpeg", "-i", video_file, "-vf",
        f"subtitles={subtitles_file}:force_style='Fontsize=24,PrimaryColour=&HFFFFFF&,Alignment=2'",
        "-c:a", "copy", "-y", output_file
    ])
    return output_file

def combine_videos(main_video, background_video, output_file):
    print("üõ†Ô∏è –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–∏–¥–µ–æ...")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–∏–¥–µ–æ
    main_duration = get_video_duration(main_video)
    print(f"  üìä –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–∏–¥–µ–æ: {format_time(main_duration)}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ
    bg_duration = get_video_duration(background_video)
    print(f"  üìä –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ: {format_time(bg_duration)}")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ
    temp_bg_file = "temp_background.mp4"
    
    if abs(main_duration - bg_duration) < 1:
        # –ï—Å–ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ (—Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–Ω—å—à–µ 1 —Å–µ–∫—É–Ω–¥—ã),
        # –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ –∫–∞–∫ –µ—Å—Ç—å
        print("  ‚úì –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ –ø—Ä–∏–º–µ—Ä–Ω–æ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
        processed_bg = background_video
    elif bg_duration > main_duration:
        # –ï—Å–ª–∏ —Ñ–æ–Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ –¥–ª–∏–Ω–Ω–µ–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ, –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ
        print(f"  ‚úÇÔ∏è –û–±—Ä–µ–∑–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ –¥–æ {format_time(main_duration)}")
        subprocess.run([
            "ffmpeg", "-i", background_video, "-t", str(main_duration),
            "-c:v", "copy", "-c:a", "copy", "-y", temp_bg_file
        ])
        processed_bg = temp_bg_file
    else:
        # –ï—Å–ª–∏ —Ñ–æ–Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ –∫–æ—Ä–æ—á–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ, –∑–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º –µ–≥–æ
        print(f"  üîÑ –£–¥–ª–∏–Ω—è–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ –¥–æ {format_time(main_duration)}")
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        repetitions = int(main_duration / bg_duration) + 1
        print(f"  üî¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: {repetitions}")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –¥–ª—è concat –¥–µ–º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–æ—Ä–∞
        concat_file = "concat_list.txt"
        with open(concat_file, "w") as f:
            for _ in range(repetitions):
                f.write(f"file '{background_video}'\n")
        
        # –°–æ–µ–¥–∏–Ω—è–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        subprocess.run([
            "ffmpeg", "-f", "concat", "-safe", "0", "-i", concat_file,
            "-t", str(main_duration), "-c", "copy", "-y", temp_bg_file
        ])
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º
        if os.path.exists(concat_file):
            os.remove(concat_file)
        
        processed_bg = temp_bg_file
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Ñ–æ–Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ —Å –æ—Å–Ω–æ–≤–Ω—ã–º
    print("  üîÑ –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–∏–¥–µ–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ...")
    subprocess.run([
        "ffmpeg", "-i", main_video, "-i", processed_bg, "-filter_complex",
        "[0:v]scale=1080:-1[v0]; [1:v]scale=1080:-1[v1]; [v0][v1]vstack=inputs=2[v]",
        "-map", "[v]", "-map", "0:a", "-c:v", "libx264", "-crf", "28", "-preset", "fast",
        "-y", output_file
    ])
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    if os.path.exists(temp_bg_file) and temp_bg_file != background_video:
        os.remove(temp_bg_file)
        print("  üßπ –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ")
    
    return output_file

def split_video(video_file, output_folder, segment_time=120):
    os.makedirs(output_folder, exist_ok=True)
    print("‚úÇÔ∏è –ù–∞—Ä–µ–∑–∫–∞ –≤–∏–¥–µ–æ –Ω–∞ —á–∞—Å—Ç–∏...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
    video_info = get_video_info(video_file)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ –≤ —Ñ–∞–π–ª
    info_file = os.path.join(output_folder, "video_info.txt")
    with open(info_file, 'w', encoding='utf-8') as f:
        f.write(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ:\n")
        f.write(f"–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {video_info['width']}x{video_info['height']}\n")
        f.write(f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {video_info['duration_formatted']} ({video_info['duration']:.2f} —Å–µ–∫)\n")
        f.write(f"–ë–∏—Ç—Ä–µ–π—Ç: {video_info['bitrate']} –±–∏—Ç/—Å\n")
    
    # –ù–∞—Ä–µ–∑–∞–µ–º –≤–∏–¥–µ–æ –Ω–∞ —á–∞—Å—Ç–∏
    subprocess.run([
        "ffmpeg", "-i", video_file, "-c", "copy", "-map", "0",
        "-segment_time", str(segment_time), "-f", "segment", "-reset_timestamps", "1",
        os.path.join(output_folder, "part_%03d.mp4")
    ])
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —á–∞—Å—Ç–µ–π
    parts = [f for f in os.listdir(output_folder) if f.startswith("part_") and f.endswith(".mp4")]
    parts.sort()
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —á–∞—Å—Ç—è—Ö
    parts_info_file = os.path.join(output_folder, "parts_info.txt")
    with open(parts_info_file, 'w', encoding='utf-8') as f:
        f.write(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Å—Ç—è—Ö –≤–∏–¥–µ–æ:\n")
        f.write(f"{'='*50}\n")
        for i, part in enumerate(parts):
            part_path = os.path.join(output_folder, part)
            part_info = get_video_info(part_path)
            f.write(f"–ß–∞—Å—Ç—å {i+1}: {part}\n")
            f.write(f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {part_info['duration_formatted']}\n")
            f.write(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(part_path) / (1024*1024):.2f} –ú–ë\n")
            f.write(f"{'='*50}\n")
    
    return output_folder