import os
import subprocess
import yt_dlp
import whisper

# üëâ –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
input_video_url = "https://www.youtube.com/watch?v=-vyheMu_DYc"  # –û—Å–Ω–æ–≤–Ω–æ–µ –≤–∏–¥–µ–æ
second_video_url = "https://www.youtube.com/watch?v=g8YF_d_sAyU"  # –í–∏–¥–µ–æ —Å–Ω–∏–∑—É
output_folder = "output_parts"  # –ü–∞–ø–∫–∞ –¥–ª—è –Ω–∞—Ä–µ–∑–æ–∫
final_video = "final_full.mp4"  # –ò—Ç–æ–≥–æ–≤–æ–µ –≤–∏–¥–µ–æ
subtitles_video = "input_with_subtitles.mp4"  # –í–∏–¥–µ–æ —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏
final_with_subtitles = "final_with_subtitles.mp4"  # –ò—Ç–æ–≥–æ–≤–æ–µ –≤–∏–¥–µ–æ —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏

# üëâ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å YouTube
def download_youtube_video(url, filename):
    ydl_opts = {
        "format": "bv*[height<=1080]+ba/b[height<=1080]",  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ 720p
        "outtmpl": filename,  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        "merge_output_format": "mp4",  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MP4
    }
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        ydl.download([url])
    return filename if os.path.exists(filename) else None

# –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
print("üîª –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–∏–¥–µ–æ...")
input_video = download_youtube_video(input_video_url, "downloaded_input.mp4")
print(f"‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {input_video}")

print("üîª –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –≤–∏–¥–µ–æ...")
second_video = download_youtube_video(second_video_url, "downloaded_second.mp4")
print(f"‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {second_video}")

# üëâ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ
def get_video_duration(video_file):
    result = subprocess.run(
        ["ffprobe", "-i", video_file, "-show_entries", "format=duration", "-v", "quiet", "-of", "csv=p=0"],
        capture_output=True, text=True
    )
    return float(result.stdout.strip())

# –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–∏–¥–µ–æ
input_duration = get_video_duration(input_video)

# üëâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –ø–µ—Ä–µ–¥ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º
print("üîä –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ...")
subprocess.run(["ffmpeg", "-i", input_video, "-vn", "-acodec", "copy", "audio.aac"])

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å Whisper
model = whisper.load_model("base")

print("üìù –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏...")
result = model.transcribe("audio.aac", fp16=False)

# –°–æ–∑–¥–∞–µ–º SRT-—Ñ–∞–π–ª —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ
subtitles_srt = "subtitles.srt"
with open(subtitles_srt, "w", encoding="utf-8") as f:
    index = 1
    for segment in result["segments"]:
        words = segment["text"].split()
        start_time = segment["start"]
        end_time = segment["end"]
        duration = end_time - start_time
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 2-3 —Å–ª–æ–≤–∞
        chunk_size = 3  # –ú–∞–∫—Å–∏–º—É–º 3 —Å–ª–æ–≤–∞ –Ω–∞ —ç–∫—Ä–∞–Ω
        for i in range(0, len(words), chunk_size):
            chunk = " ".join(words[i:i + chunk_size])
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ (—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ –æ—Ç—Ä–µ–∑–∫–∞)
            chunk_start = start_time + (i / len(words)) * duration
            chunk_end = chunk_start + (duration / (len(words) / chunk_size))

            # –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è SRT
            start_str = f"{int(chunk_start // 3600):02}:{int((chunk_start % 3600) // 60):02}:{int(chunk_start % 60):02},{int((chunk_start % 1) * 1000):03}"
            end_str = f"{int(chunk_end // 3600):02}:{int((chunk_end % 3600) // 60):02}:{int(chunk_end % 60):02},{int((chunk_end % 1) * 1000):03}"

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
            f.write(f"{index}\n")
            f.write(f"{start_str} --> {end_str}\n")
            f.write(f"{chunk}\n\n")
            index += 1

# üëâ –î–æ–±–∞–≤–ª—è–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã –∫ –ø–µ—Ä–≤–æ–º—É –≤–∏–¥–µ–æ
print("üé¨ –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã...")
subprocess.run([
    "ffmpeg", "-i", input_video, "-vf",
    f"subtitles={subtitles_srt}:force_style='Fontsize=24,PrimaryColour=&HFFFFFF&,Alignment=2'",
    "-c:a", "copy", "-y", subtitles_video
])

# üëâ –¢–µ–ø–µ—Ä—å —Å–æ–µ–¥–∏–Ω—è–µ–º –≤–∏–¥–µ–æ
print("üõ†Ô∏è –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–∏–¥–µ–æ...")
subprocess.run([
    "ffmpeg", "-i", subtitles_video, "-i", second_video, "-filter_complex",
    "[0:v]scale=1080:-1[v0]; [1:v]scale=1080:-1[v1]; [v0][v1]vstack=inputs=2[v]",
    "-map", "[v]", "-map", "0:a", "-c:v", "libx264", "-crf", "28", "-preset", "fast",
    "-y", final_with_subtitles
])

# üëâ –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –Ω–∞—Ä–µ–∑–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
os.makedirs(output_folder, exist_ok=True)

# üëâ –ù–∞—Ä–µ–∑–∞–µ–º –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 2 –º–∏–Ω—É—Ç—ã
print("‚úÇÔ∏è –ù–∞—Ä–µ–∑–∫–∞ –≤–∏–¥–µ–æ –Ω–∞ —á–∞—Å—Ç–∏...")
subprocess.run([
    "ffmpeg", "-i", final_with_subtitles, "-c", "copy", "-map", "0",
    "-segment_time", "120", "-f", "segment", "-reset_timestamps", "1",
    os.path.join(output_folder, "part_%03d.mp4")
])

print(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –ù–∞—Ä–µ–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: {output_folder}")
print(f"‚úÖ –ò—Ç–æ–≥–æ–≤–æ–µ –≤–∏–¥–µ–æ —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏: {final_with_subtitles}")
